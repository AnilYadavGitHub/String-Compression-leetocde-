#include <iostream>
#include <vector>
#include <string>

using namespace std;

class Solution {
public:
    int compress(vector<char>& chars) {
        int k = 0;
        int n = chars.size();
        int i = 0;

        while (i < n) {
            int j = i + 1;

            // Count the occurrences of the current character
            while (j < n && chars[i] == chars[j]) {
                j++;
            }

            // Store the character
            chars[k++] = chars[i];

            int count = j - i;

            // If the count is greater than 1, convert it to a string and add each character of the count
            if (count > 1) {
                string cnt = to_string(count);
                for (auto ch : cnt) {
                    chars[k++] = ch;
                }
            }

            // Move to the next group of characters
            i = j;
        }
        return k;
    }
};

int main() {
    // Test case
    vector<char> chars = {'a', 'a', 'b', 'b', 'c', 'c', 'c'};
    
    Solution solution;
    int newLength = solution.compress(chars);
    
    // Print the compressed characters and the new length
    cout << "Compressed characters: ";
    for (int i = 0; i < newLength; i++) {
        cout << chars[i] << " ";
    }
    cout << endl;
    
    cout << "New length: " << newLength << endl;

    return 0;
}
